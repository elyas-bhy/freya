/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-12-19 23:55:21 UTC)
 * on 2014-01-02 at 17:14:48 UTC 
 * Modify at your own risk.
 */

package com.appspot.freya_app.freya;

/**
 * Service definition for Freya (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FreyaRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Freya extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.17.0-rc of the freya library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  //public static final String DEFAULT_ROOT_URL = "https://freya-app.appspot.com/_ah/api/";
  public static final String DEFAULT_ROOT_URL = "http://localhost:8080/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "freya/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Freya(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Freya(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Artcollections collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Freya freya = new Freya(...);}
   *   {@code Freya.Artcollections.List request = freya.artcollections().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Artcollections artcollections() {
    return new Artcollections();
  }

  /**
   * The "artcollections" collection of methods.
   */
  public class Artcollections {

    /**
     * Create a request for the method "artcollections.add".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Add#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.freya_app.freya.model.ArtCollection}
     * @return the request
     */
    public Add add(com.appspot.freya_app.freya.model.ArtCollection content) throws java.io.IOException {
      Add result = new Add(content);
      initialize(result);
      return result;
    }

    public class Add extends FreyaRequest<com.appspot.freya_app.freya.model.Response> {

      private static final String REST_PATH = "artcollections";

      /**
       * Create a request for the method "artcollections.add".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Add#execute()} method to invoke the remote operation. <p> {@link
       * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.freya_app.freya.model.ArtCollection}
       * @since 1.13
       */
      protected Add(com.appspot.freya_app.freya.model.ArtCollection content) {
        super(Freya.this, "POST", REST_PATH, content, com.appspot.freya_app.freya.model.Response.class);
      }

      @Override
      public Add setAlt(java.lang.String alt) {
        return (Add) super.setAlt(alt);
      }

      @Override
      public Add setFields(java.lang.String fields) {
        return (Add) super.setFields(fields);
      }

      @Override
      public Add setKey(java.lang.String key) {
        return (Add) super.setKey(key);
      }

      @Override
      public Add setOauthToken(java.lang.String oauthToken) {
        return (Add) super.setOauthToken(oauthToken);
      }

      @Override
      public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Add) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Add setQuotaUser(java.lang.String quotaUser) {
        return (Add) super.setQuotaUser(quotaUser);
      }

      @Override
      public Add setUserIp(java.lang.String userIp) {
        return (Add) super.setUserIp(userIp);
      }

      @Override
      public Add set(String parameterName, Object value) {
        return (Add) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artcollections.addartwork".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Addartwork#execute()} method to invoke the remote operation.
     *
     * @param artcollectionId
     * @param content the {@link com.appspot.freya_app.freya.model.Artwork}
     * @return the request
     */
    public Addartwork addartwork(java.lang.Long artcollectionId, com.appspot.freya_app.freya.model.Artwork content) throws java.io.IOException {
      Addartwork result = new Addartwork(artcollectionId, content);
      initialize(result);
      return result;
    }

    public class Addartwork extends FreyaRequest<com.appspot.freya_app.freya.model.Response> {

      private static final String REST_PATH = "artcollections/{artcollection_id}";

      /**
       * Create a request for the method "artcollections.addartwork".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Addartwork#execute()} method to invoke the remote operation. <p>
       * {@link
       * Addartwork#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param artcollectionId
       * @param content the {@link com.appspot.freya_app.freya.model.Artwork}
       * @since 1.13
       */
      protected Addartwork(java.lang.Long artcollectionId, com.appspot.freya_app.freya.model.Artwork content) {
        super(Freya.this, "POST", REST_PATH, content, com.appspot.freya_app.freya.model.Response.class);
        this.artcollectionId = com.google.api.client.util.Preconditions.checkNotNull(artcollectionId, "Required parameter artcollectionId must be specified.");
      }

      @Override
      public Addartwork setAlt(java.lang.String alt) {
        return (Addartwork) super.setAlt(alt);
      }

      @Override
      public Addartwork setFields(java.lang.String fields) {
        return (Addartwork) super.setFields(fields);
      }

      @Override
      public Addartwork setKey(java.lang.String key) {
        return (Addartwork) super.setKey(key);
      }

      @Override
      public Addartwork setOauthToken(java.lang.String oauthToken) {
        return (Addartwork) super.setOauthToken(oauthToken);
      }

      @Override
      public Addartwork setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Addartwork) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Addartwork setQuotaUser(java.lang.String quotaUser) {
        return (Addartwork) super.setQuotaUser(quotaUser);
      }

      @Override
      public Addartwork setUserIp(java.lang.String userIp) {
        return (Addartwork) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("artcollection_id")
      private java.lang.Long artcollectionId;

      /**

       */
      public java.lang.Long getArtcollectionId() {
        return artcollectionId;
      }

      public Addartwork setArtcollectionId(java.lang.Long artcollectionId) {
        this.artcollectionId = artcollectionId;
        return this;
      }

      @Override
      public Addartwork set(String parameterName, Object value) {
        return (Addartwork) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artcollections.addcomment".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Addcomment#execute()} method to invoke the remote operation.
     *
     * @param artcollectionId
     * @param comment
     * @return the request
     */
    public Addcomment addcomment(java.lang.Long artcollectionId, java.lang.String comment) throws java.io.IOException {
      Addcomment result = new Addcomment(artcollectionId, comment);
      initialize(result);
      return result;
    }

    public class Addcomment extends FreyaRequest<com.appspot.freya_app.freya.model.Response> {

      private static final String REST_PATH = "artcollections/{artcollection_id}/comment";

      /**
       * Create a request for the method "artcollections.addcomment".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Addcomment#execute()} method to invoke the remote operation. <p>
       * {@link
       * Addcomment#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param artcollectionId
       * @param comment
       * @since 1.13
       */
      protected Addcomment(java.lang.Long artcollectionId, java.lang.String comment) {
        super(Freya.this, "POST", REST_PATH, null, com.appspot.freya_app.freya.model.Response.class);
        this.artcollectionId = com.google.api.client.util.Preconditions.checkNotNull(artcollectionId, "Required parameter artcollectionId must be specified.");
        this.comment = com.google.api.client.util.Preconditions.checkNotNull(comment, "Required parameter comment must be specified.");
      }

      @Override
      public Addcomment setAlt(java.lang.String alt) {
        return (Addcomment) super.setAlt(alt);
      }

      @Override
      public Addcomment setFields(java.lang.String fields) {
        return (Addcomment) super.setFields(fields);
      }

      @Override
      public Addcomment setKey(java.lang.String key) {
        return (Addcomment) super.setKey(key);
      }

      @Override
      public Addcomment setOauthToken(java.lang.String oauthToken) {
        return (Addcomment) super.setOauthToken(oauthToken);
      }

      @Override
      public Addcomment setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Addcomment) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Addcomment setQuotaUser(java.lang.String quotaUser) {
        return (Addcomment) super.setQuotaUser(quotaUser);
      }

      @Override
      public Addcomment setUserIp(java.lang.String userIp) {
        return (Addcomment) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("artcollection_id")
      private java.lang.Long artcollectionId;

      /**

       */
      public java.lang.Long getArtcollectionId() {
        return artcollectionId;
      }

      public Addcomment setArtcollectionId(java.lang.Long artcollectionId) {
        this.artcollectionId = artcollectionId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String comment;

      /**

       */
      public java.lang.String getComment() {
        return comment;
      }

      public Addcomment setComment(java.lang.String comment) {
        this.comment = comment;
        return this;
      }

      @Override
      public Addcomment set(String parameterName, Object value) {
        return (Addcomment) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artcollections.addtag".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Addtag#execute()} method to invoke the remote operation.
     *
     * @param artcollectionId
     * @param tag
     * @return the request
     */
    public Addtag addtag(java.lang.Long artcollectionId, java.lang.String tag) throws java.io.IOException {
      Addtag result = new Addtag(artcollectionId, tag);
      initialize(result);
      return result;
    }

    public class Addtag extends FreyaRequest<com.appspot.freya_app.freya.model.Response> {

      private static final String REST_PATH = "artcollections/{artcollection_id}/tag";

      /**
       * Create a request for the method "artcollections.addtag".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Addtag#execute()} method to invoke the remote operation. <p> {@link
       * Addtag#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param artcollectionId
       * @param tag
       * @since 1.13
       */
      protected Addtag(java.lang.Long artcollectionId, java.lang.String tag) {
        super(Freya.this, "POST", REST_PATH, null, com.appspot.freya_app.freya.model.Response.class);
        this.artcollectionId = com.google.api.client.util.Preconditions.checkNotNull(artcollectionId, "Required parameter artcollectionId must be specified.");
        this.tag = com.google.api.client.util.Preconditions.checkNotNull(tag, "Required parameter tag must be specified.");
      }

      @Override
      public Addtag setAlt(java.lang.String alt) {
        return (Addtag) super.setAlt(alt);
      }

      @Override
      public Addtag setFields(java.lang.String fields) {
        return (Addtag) super.setFields(fields);
      }

      @Override
      public Addtag setKey(java.lang.String key) {
        return (Addtag) super.setKey(key);
      }

      @Override
      public Addtag setOauthToken(java.lang.String oauthToken) {
        return (Addtag) super.setOauthToken(oauthToken);
      }

      @Override
      public Addtag setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Addtag) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Addtag setQuotaUser(java.lang.String quotaUser) {
        return (Addtag) super.setQuotaUser(quotaUser);
      }

      @Override
      public Addtag setUserIp(java.lang.String userIp) {
        return (Addtag) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("artcollection_id")
      private java.lang.Long artcollectionId;

      /**

       */
      public java.lang.Long getArtcollectionId() {
        return artcollectionId;
      }

      public Addtag setArtcollectionId(java.lang.Long artcollectionId) {
        this.artcollectionId = artcollectionId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String tag;

      /**

       */
      public java.lang.String getTag() {
        return tag;
      }

      public Addtag setTag(java.lang.String tag) {
        this.tag = tag;
        return this;
      }

      @Override
      public Addtag set(String parameterName, Object value) {
        return (Addtag) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artcollections.get".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param artcollectionId
     * @return the request
     */
    public Get get(java.lang.Long artcollectionId) throws java.io.IOException {
      Get result = new Get(artcollectionId);
      initialize(result);
      return result;
    }

    public class Get extends FreyaRequest<com.appspot.freya_app.freya.model.ArtCollection> {

      private static final String REST_PATH = "artcollections/{artcollection_id}";

      /**
       * Create a request for the method "artcollections.get".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param artcollectionId
       * @since 1.13
       */
      protected Get(java.lang.Long artcollectionId) {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.ArtCollection.class);
        this.artcollectionId = com.google.api.client.util.Preconditions.checkNotNull(artcollectionId, "Required parameter artcollectionId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("artcollection_id")
      private java.lang.Long artcollectionId;

      /**

       */
      public java.lang.Long getArtcollectionId() {
        return artcollectionId;
      }

      public Get setArtcollectionId(java.lang.Long artcollectionId) {
        this.artcollectionId = artcollectionId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artcollections.list".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FreyaRequest<com.appspot.freya_app.freya.model.ArtCollectionCollection> {

      private static final String REST_PATH = "artcollections";

      /**
       * Create a request for the method "artcollections.list".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.ArtCollectionCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Artcollection collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Freya freya = new Freya(...);}
     *   {@code Freya.Artcollection.List request = freya.artcollection().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Artcollection artcollection() {
      return new Artcollection();
    }

    /**
     * The "artcollection" collection of methods.
     */
    public class Artcollection {

      /**
       * Create a request for the method "artcollection.artworks".
       *
       * This request holds the parameters needed by the freya server.  After setting any optional
       * parameters, call the {@link Artworks#execute()} method to invoke the remote operation.
       *
       * @param artcollectionId
       * @param count
       * @return the request
       */
      public Artworks artworks(java.lang.Long artcollectionId, java.lang.Integer count) throws java.io.IOException {
        Artworks result = new Artworks(artcollectionId, count);
        initialize(result);
        return result;
      }

      public class Artworks extends FreyaRequest<com.appspot.freya_app.freya.model.ArtworkCollection> {

        private static final String REST_PATH = "artcollections/{artcollection_id}/artworks";

        /**
         * Create a request for the method "artcollection.artworks".
         *
         * This request holds the parameters needed by the the freya server.  After setting any optional
         * parameters, call the {@link Artworks#execute()} method to invoke the remote operation. <p>
         * {@link
         * Artworks#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param artcollectionId
         * @param count
         * @since 1.13
         */
        protected Artworks(java.lang.Long artcollectionId, java.lang.Integer count) {
          super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.ArtworkCollection.class);
          this.artcollectionId = com.google.api.client.util.Preconditions.checkNotNull(artcollectionId, "Required parameter artcollectionId must be specified.");
          this.count = com.google.api.client.util.Preconditions.checkNotNull(count, "Required parameter count must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Artworks setAlt(java.lang.String alt) {
          return (Artworks) super.setAlt(alt);
        }

        @Override
        public Artworks setFields(java.lang.String fields) {
          return (Artworks) super.setFields(fields);
        }

        @Override
        public Artworks setKey(java.lang.String key) {
          return (Artworks) super.setKey(key);
        }

        @Override
        public Artworks setOauthToken(java.lang.String oauthToken) {
          return (Artworks) super.setOauthToken(oauthToken);
        }

        @Override
        public Artworks setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Artworks) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Artworks setQuotaUser(java.lang.String quotaUser) {
          return (Artworks) super.setQuotaUser(quotaUser);
        }

        @Override
        public Artworks setUserIp(java.lang.String userIp) {
          return (Artworks) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key("artcollection_id")
        private java.lang.Long artcollectionId;

        /**

         */
        public java.lang.Long getArtcollectionId() {
          return artcollectionId;
        }

        public Artworks setArtcollectionId(java.lang.Long artcollectionId) {
          this.artcollectionId = artcollectionId;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Integer count;

        /**

         */
        public java.lang.Integer getCount() {
          return count;
        }

        public Artworks setCount(java.lang.Integer count) {
          this.count = count;
          return this;
        }

        @Override
        public Artworks set(String parameterName, Object value) {
          return (Artworks) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "artcollection.reproductions".
       *
       * This request holds the parameters needed by the freya server.  After setting any optional
       * parameters, call the {@link Reproductions#execute()} method to invoke the remote operation.
       *
       * @param artcollectionId
       * @return the request
       */
      public Reproductions reproductions(java.lang.Long artcollectionId) throws java.io.IOException {
        Reproductions result = new Reproductions(artcollectionId);
        initialize(result);
        return result;
      }

      public class Reproductions extends FreyaRequest<com.appspot.freya_app.freya.model.ReproductionCollection> {

        private static final String REST_PATH = "artcollections/{artcollection_id}/reproductions";

        /**
         * Create a request for the method "artcollection.reproductions".
         *
         * This request holds the parameters needed by the the freya server.  After setting any optional
         * parameters, call the {@link Reproductions#execute()} method to invoke the remote operation. <p>
         * {@link Reproductions#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
         * equest)} must be called to initialize this instance immediately after invoking the constructor.
         * </p>
         *
         * @param artcollectionId
         * @since 1.13
         */
        protected Reproductions(java.lang.Long artcollectionId) {
          super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.ReproductionCollection.class);
          this.artcollectionId = com.google.api.client.util.Preconditions.checkNotNull(artcollectionId, "Required parameter artcollectionId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Reproductions setAlt(java.lang.String alt) {
          return (Reproductions) super.setAlt(alt);
        }

        @Override
        public Reproductions setFields(java.lang.String fields) {
          return (Reproductions) super.setFields(fields);
        }

        @Override
        public Reproductions setKey(java.lang.String key) {
          return (Reproductions) super.setKey(key);
        }

        @Override
        public Reproductions setOauthToken(java.lang.String oauthToken) {
          return (Reproductions) super.setOauthToken(oauthToken);
        }

        @Override
        public Reproductions setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Reproductions) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Reproductions setQuotaUser(java.lang.String quotaUser) {
          return (Reproductions) super.setQuotaUser(quotaUser);
        }

        @Override
        public Reproductions setUserIp(java.lang.String userIp) {
          return (Reproductions) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key("artcollection_id")
        private java.lang.Long artcollectionId;

        /**

         */
        public java.lang.Long getArtcollectionId() {
          return artcollectionId;
        }

        public Reproductions setArtcollectionId(java.lang.Long artcollectionId) {
          this.artcollectionId = artcollectionId;
          return this;
        }

        @Override
        public Reproductions set(String parameterName, Object value) {
          return (Reproductions) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Artists collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Freya freya = new Freya(...);}
   *   {@code Freya.Artists.List request = freya.artists().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Artists artists() {
    return new Artists();
  }

  /**
   * The "artists" collection of methods.
   */
  public class Artists {

    /**
     * Create a request for the method "artists.artworks".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Artworks#execute()} method to invoke the remote operation.
     *
     * @param artistId
     * @return the request
     */
    public Artworks artworks(java.lang.String artistId) throws java.io.IOException {
      Artworks result = new Artworks(artistId);
      initialize(result);
      return result;
    }

    public class Artworks extends FreyaRequest<com.appspot.freya_app.freya.model.ArtworkCollection> {

      private static final String REST_PATH = "artists/{artist_id}/artworks";

      /**
       * Create a request for the method "artists.artworks".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Artworks#execute()} method to invoke the remote operation. <p>
       * {@link
       * Artworks#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param artistId
       * @since 1.13
       */
      protected Artworks(java.lang.String artistId) {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.ArtworkCollection.class);
        this.artistId = com.google.api.client.util.Preconditions.checkNotNull(artistId, "Required parameter artistId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Artworks setAlt(java.lang.String alt) {
        return (Artworks) super.setAlt(alt);
      }

      @Override
      public Artworks setFields(java.lang.String fields) {
        return (Artworks) super.setFields(fields);
      }

      @Override
      public Artworks setKey(java.lang.String key) {
        return (Artworks) super.setKey(key);
      }

      @Override
      public Artworks setOauthToken(java.lang.String oauthToken) {
        return (Artworks) super.setOauthToken(oauthToken);
      }

      @Override
      public Artworks setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Artworks) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Artworks setQuotaUser(java.lang.String quotaUser) {
        return (Artworks) super.setQuotaUser(quotaUser);
      }

      @Override
      public Artworks setUserIp(java.lang.String userIp) {
        return (Artworks) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("artist_id")
      private java.lang.String artistId;

      /**

       */
      public java.lang.String getArtistId() {
        return artistId;
      }

      public Artworks setArtistId(java.lang.String artistId) {
        this.artistId = artistId;
        return this;
      }

      @Override
      public Artworks set(String parameterName, Object value) {
        return (Artworks) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artists.list".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FreyaRequest<com.appspot.freya_app.freya.model.ArtistCollection> {

      private static final String REST_PATH = "artists";

      /**
       * Create a request for the method "artists.list".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.ArtistCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artists.photos".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Photos#execute()} method to invoke the remote operation.
     *
     * @param artistId
     * @return the request
     */
    public Photos photos(java.lang.String artistId) throws java.io.IOException {
      Photos result = new Photos(artistId);
      initialize(result);
      return result;
    }

    public class Photos extends FreyaRequest<com.appspot.freya_app.freya.model.PhotoCollection> {

      private static final String REST_PATH = "artists/{artist_id}/photos";

      /**
       * Create a request for the method "artists.photos".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Photos#execute()} method to invoke the remote operation. <p> {@link
       * Photos#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param artistId
       * @since 1.13
       */
      protected Photos(java.lang.String artistId) {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.PhotoCollection.class);
        this.artistId = com.google.api.client.util.Preconditions.checkNotNull(artistId, "Required parameter artistId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Photos setAlt(java.lang.String alt) {
        return (Photos) super.setAlt(alt);
      }

      @Override
      public Photos setFields(java.lang.String fields) {
        return (Photos) super.setFields(fields);
      }

      @Override
      public Photos setKey(java.lang.String key) {
        return (Photos) super.setKey(key);
      }

      @Override
      public Photos setOauthToken(java.lang.String oauthToken) {
        return (Photos) super.setOauthToken(oauthToken);
      }

      @Override
      public Photos setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Photos) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Photos setQuotaUser(java.lang.String quotaUser) {
        return (Photos) super.setQuotaUser(quotaUser);
      }

      @Override
      public Photos setUserIp(java.lang.String userIp) {
        return (Photos) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("artist_id")
      private java.lang.String artistId;

      /**

       */
      public java.lang.String getArtistId() {
        return artistId;
      }

      public Photos setArtistId(java.lang.String artistId) {
        this.artistId = artistId;
        return this;
      }

      @Override
      public Photos set(String parameterName, Object value) {
        return (Photos) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Artworks collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Freya freya = new Freya(...);}
   *   {@code Freya.Artworks.List request = freya.artworks().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Artworks artworks() {
    return new Artworks();
  }

  /**
   * The "artworks" collection of methods.
   */
  public class Artworks {

    /**
     * Create a request for the method "artworks.add".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Add#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.freya_app.freya.model.Artwork}
     * @return the request
     */
    public Add add(com.appspot.freya_app.freya.model.Artwork content) throws java.io.IOException {
      Add result = new Add(content);
      initialize(result);
      return result;
    }

    public class Add extends FreyaRequest<com.appspot.freya_app.freya.model.Response> {

      private static final String REST_PATH = "artworks";

      /**
       * Create a request for the method "artworks.add".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Add#execute()} method to invoke the remote operation. <p> {@link
       * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.freya_app.freya.model.Artwork}
       * @since 1.13
       */
      protected Add(com.appspot.freya_app.freya.model.Artwork content) {
        super(Freya.this, "POST", REST_PATH, content, com.appspot.freya_app.freya.model.Response.class);
      }

      @Override
      public Add setAlt(java.lang.String alt) {
        return (Add) super.setAlt(alt);
      }

      @Override
      public Add setFields(java.lang.String fields) {
        return (Add) super.setFields(fields);
      }

      @Override
      public Add setKey(java.lang.String key) {
        return (Add) super.setKey(key);
      }

      @Override
      public Add setOauthToken(java.lang.String oauthToken) {
        return (Add) super.setOauthToken(oauthToken);
      }

      @Override
      public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Add) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Add setQuotaUser(java.lang.String quotaUser) {
        return (Add) super.setQuotaUser(quotaUser);
      }

      @Override
      public Add setUserIp(java.lang.String userIp) {
        return (Add) super.setUserIp(userIp);
      }

      @Override
      public Add set(String parameterName, Object value) {
        return (Add) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artworks.addArtist".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link AddArtist#execute()} method to invoke the remote operation.
     *
     * @param artworkId
     * @param content the {@link com.appspot.freya_app.freya.model.Artist}
     * @return the request
     */
    public AddArtist addArtist(java.lang.String artworkId, com.appspot.freya_app.freya.model.Artist content) throws java.io.IOException {
      AddArtist result = new AddArtist(artworkId, content);
      initialize(result);
      return result;
    }

    public class AddArtist extends FreyaRequest<com.appspot.freya_app.freya.model.Response> {

      private static final String REST_PATH = "artworks/{artwork_id}/artist";

      /**
       * Create a request for the method "artworks.addArtist".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link AddArtist#execute()} method to invoke the remote operation. <p>
       * {@link
       * AddArtist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param artworkId
       * @param content the {@link com.appspot.freya_app.freya.model.Artist}
       * @since 1.13
       */
      protected AddArtist(java.lang.String artworkId, com.appspot.freya_app.freya.model.Artist content) {
        super(Freya.this, "POST", REST_PATH, content, com.appspot.freya_app.freya.model.Response.class);
        this.artworkId = com.google.api.client.util.Preconditions.checkNotNull(artworkId, "Required parameter artworkId must be specified.");
      }

      @Override
      public AddArtist setAlt(java.lang.String alt) {
        return (AddArtist) super.setAlt(alt);
      }

      @Override
      public AddArtist setFields(java.lang.String fields) {
        return (AddArtist) super.setFields(fields);
      }

      @Override
      public AddArtist setKey(java.lang.String key) {
        return (AddArtist) super.setKey(key);
      }

      @Override
      public AddArtist setOauthToken(java.lang.String oauthToken) {
        return (AddArtist) super.setOauthToken(oauthToken);
      }

      @Override
      public AddArtist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddArtist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddArtist setQuotaUser(java.lang.String quotaUser) {
        return (AddArtist) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddArtist setUserIp(java.lang.String userIp) {
        return (AddArtist) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("artwork_id")
      private java.lang.String artworkId;

      /**

       */
      public java.lang.String getArtworkId() {
        return artworkId;
      }

      public AddArtist setArtworkId(java.lang.String artworkId) {
        this.artworkId = artworkId;
        return this;
      }

      @Override
      public AddArtist set(String parameterName, Object value) {
        return (AddArtist) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artworks.addPhoto".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link AddPhoto#execute()} method to invoke the remote operation.
     *
     * @param artworkId
     * @param content the {@link com.appspot.freya_app.freya.model.Photo}
     * @return the request
     */
    public AddPhoto addPhoto(java.lang.String artworkId, com.appspot.freya_app.freya.model.Photo content) throws java.io.IOException {
      AddPhoto result = new AddPhoto(artworkId, content);
      initialize(result);
      return result;
    }

    public class AddPhoto extends FreyaRequest<com.appspot.freya_app.freya.model.Response> {

      private static final String REST_PATH = "artworks/{artwork_id}/photo";

      /**
       * Create a request for the method "artworks.addPhoto".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link AddPhoto#execute()} method to invoke the remote operation. <p>
       * {@link
       * AddPhoto#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param artworkId
       * @param content the {@link com.appspot.freya_app.freya.model.Photo}
       * @since 1.13
       */
      protected AddPhoto(java.lang.String artworkId, com.appspot.freya_app.freya.model.Photo content) {
        super(Freya.this, "POST", REST_PATH, content, com.appspot.freya_app.freya.model.Response.class);
        this.artworkId = com.google.api.client.util.Preconditions.checkNotNull(artworkId, "Required parameter artworkId must be specified.");
      }

      @Override
      public AddPhoto setAlt(java.lang.String alt) {
        return (AddPhoto) super.setAlt(alt);
      }

      @Override
      public AddPhoto setFields(java.lang.String fields) {
        return (AddPhoto) super.setFields(fields);
      }

      @Override
      public AddPhoto setKey(java.lang.String key) {
        return (AddPhoto) super.setKey(key);
      }

      @Override
      public AddPhoto setOauthToken(java.lang.String oauthToken) {
        return (AddPhoto) super.setOauthToken(oauthToken);
      }

      @Override
      public AddPhoto setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddPhoto) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddPhoto setQuotaUser(java.lang.String quotaUser) {
        return (AddPhoto) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddPhoto setUserIp(java.lang.String userIp) {
        return (AddPhoto) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("artwork_id")
      private java.lang.String artworkId;

      /**

       */
      public java.lang.String getArtworkId() {
        return artworkId;
      }

      public AddPhoto setArtworkId(java.lang.String artworkId) {
        this.artworkId = artworkId;
        return this;
      }

      @Override
      public AddPhoto set(String parameterName, Object value) {
        return (AddPhoto) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artworks.get".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param artworkId
     * @return the request
     */
    public Get get(java.lang.String artworkId) throws java.io.IOException {
      Get result = new Get(artworkId);
      initialize(result);
      return result;
    }

    public class Get extends FreyaRequest<com.appspot.freya_app.freya.model.Artwork> {

      private static final String REST_PATH = "artworks/{artwork_id}";

      /**
       * Create a request for the method "artworks.get".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param artworkId
       * @since 1.13
       */
      protected Get(java.lang.String artworkId) {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.Artwork.class);
        this.artworkId = com.google.api.client.util.Preconditions.checkNotNull(artworkId, "Required parameter artworkId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("artwork_id")
      private java.lang.String artworkId;

      /**

       */
      public java.lang.String getArtworkId() {
        return artworkId;
      }

      public Get setArtworkId(java.lang.String artworkId) {
        this.artworkId = artworkId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artworks.list".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param count
     * @param support
     * @param technique
     * @return the request
     */
    public List list(java.lang.Integer count, java.lang.String support, java.lang.String technique) throws java.io.IOException {
      List result = new List(count, support, technique);
      initialize(result);
      return result;
    }

    public class List extends FreyaRequest<com.appspot.freya_app.freya.model.ArtworkCollection> {

      private static final String REST_PATH = "artworks";

      /**
       * Create a request for the method "artworks.list".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param count
       * @param support
       * @param technique
       * @since 1.13
       */
      protected List(java.lang.Integer count, java.lang.String support, java.lang.String technique) {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.ArtworkCollection.class);
        this.count = com.google.api.client.util.Preconditions.checkNotNull(count, "Required parameter count must be specified.");
        this.support = com.google.api.client.util.Preconditions.checkNotNull(support, "Required parameter support must be specified.");
        this.technique = com.google.api.client.util.Preconditions.checkNotNull(technique, "Required parameter technique must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer count;

      /**

       */
      public java.lang.Integer getCount() {
        return count;
      }

      public List setCount(java.lang.Integer count) {
        this.count = count;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String support;

      /**

       */
      public java.lang.String getSupport() {
        return support;
      }

      public List setSupport(java.lang.String support) {
        this.support = support;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String technique;

      /**

       */
      public java.lang.String getTechnique() {
        return technique;
      }

      public List setTechnique(java.lang.String technique) {
        this.technique = technique;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "artworks.photos".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Photos#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Photos photos() throws java.io.IOException {
      Photos result = new Photos();
      initialize(result);
      return result;
    }

    public class Photos extends FreyaRequest<com.appspot.freya_app.freya.model.PhotoCollection> {

      private static final String REST_PATH = "artworks/photos";

      /**
       * Create a request for the method "artworks.photos".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Photos#execute()} method to invoke the remote operation. <p> {@link
       * Photos#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Photos() {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.PhotoCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Photos setAlt(java.lang.String alt) {
        return (Photos) super.setAlt(alt);
      }

      @Override
      public Photos setFields(java.lang.String fields) {
        return (Photos) super.setFields(fields);
      }

      @Override
      public Photos setKey(java.lang.String key) {
        return (Photos) super.setKey(key);
      }

      @Override
      public Photos setOauthToken(java.lang.String oauthToken) {
        return (Photos) super.setOauthToken(oauthToken);
      }

      @Override
      public Photos setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Photos) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Photos setQuotaUser(java.lang.String quotaUser) {
        return (Photos) super.setQuotaUser(quotaUser);
      }

      @Override
      public Photos setUserIp(java.lang.String userIp) {
        return (Photos) super.setUserIp(userIp);
      }

      @Override
      public Photos set(String parameterName, Object value) {
        return (Photos) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Artwork collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Freya freya = new Freya(...);}
     *   {@code Freya.Artwork.List request = freya.artwork().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Artwork artwork() {
      return new Artwork();
    }

    /**
     * The "artwork" collection of methods.
     */
    public class Artwork {

      /**
       * Create a request for the method "artwork.photos".
       *
       * This request holds the parameters needed by the freya server.  After setting any optional
       * parameters, call the {@link Photos#execute()} method to invoke the remote operation.
       *
       * @param artworkId
       * @return the request
       */
      public Photos photos(java.lang.String artworkId) throws java.io.IOException {
        Photos result = new Photos(artworkId);
        initialize(result);
        return result;
      }

      public class Photos extends FreyaRequest<com.appspot.freya_app.freya.model.PhotoCollection> {

        private static final String REST_PATH = "artworks/{artwork_id}/photos";

        /**
         * Create a request for the method "artwork.photos".
         *
         * This request holds the parameters needed by the the freya server.  After setting any optional
         * parameters, call the {@link Photos#execute()} method to invoke the remote operation. <p> {@link
         * Photos#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param artworkId
         * @since 1.13
         */
        protected Photos(java.lang.String artworkId) {
          super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.PhotoCollection.class);
          this.artworkId = com.google.api.client.util.Preconditions.checkNotNull(artworkId, "Required parameter artworkId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Photos setAlt(java.lang.String alt) {
          return (Photos) super.setAlt(alt);
        }

        @Override
        public Photos setFields(java.lang.String fields) {
          return (Photos) super.setFields(fields);
        }

        @Override
        public Photos setKey(java.lang.String key) {
          return (Photos) super.setKey(key);
        }

        @Override
        public Photos setOauthToken(java.lang.String oauthToken) {
          return (Photos) super.setOauthToken(oauthToken);
        }

        @Override
        public Photos setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Photos) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Photos setQuotaUser(java.lang.String quotaUser) {
          return (Photos) super.setQuotaUser(quotaUser);
        }

        @Override
        public Photos setUserIp(java.lang.String userIp) {
          return (Photos) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key("artwork_id")
        private java.lang.String artworkId;

        /**

         */
        public java.lang.String getArtworkId() {
          return artworkId;
        }

        public Photos setArtworkId(java.lang.String artworkId) {
          this.artworkId = artworkId;
          return this;
        }

        @Override
        public Photos set(String parameterName, Object value) {
          return (Photos) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "artwork.reproductions".
       *
       * This request holds the parameters needed by the freya server.  After setting any optional
       * parameters, call the {@link Reproductions#execute()} method to invoke the remote operation.
       *
       * @param artworkId
       * @return the request
       */
      public Reproductions reproductions(java.lang.String artworkId) throws java.io.IOException {
        Reproductions result = new Reproductions(artworkId);
        initialize(result);
        return result;
      }

      public class Reproductions extends FreyaRequest<com.appspot.freya_app.freya.model.ReproductionCollection> {

        private static final String REST_PATH = "artworks/{artwork_id}/reproductions";

        /**
         * Create a request for the method "artwork.reproductions".
         *
         * This request holds the parameters needed by the the freya server.  After setting any optional
         * parameters, call the {@link Reproductions#execute()} method to invoke the remote operation. <p>
         * {@link Reproductions#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
         * equest)} must be called to initialize this instance immediately after invoking the constructor.
         * </p>
         *
         * @param artworkId
         * @since 1.13
         */
        protected Reproductions(java.lang.String artworkId) {
          super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.ReproductionCollection.class);
          this.artworkId = com.google.api.client.util.Preconditions.checkNotNull(artworkId, "Required parameter artworkId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Reproductions setAlt(java.lang.String alt) {
          return (Reproductions) super.setAlt(alt);
        }

        @Override
        public Reproductions setFields(java.lang.String fields) {
          return (Reproductions) super.setFields(fields);
        }

        @Override
        public Reproductions setKey(java.lang.String key) {
          return (Reproductions) super.setKey(key);
        }

        @Override
        public Reproductions setOauthToken(java.lang.String oauthToken) {
          return (Reproductions) super.setOauthToken(oauthToken);
        }

        @Override
        public Reproductions setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Reproductions) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Reproductions setQuotaUser(java.lang.String quotaUser) {
          return (Reproductions) super.setQuotaUser(quotaUser);
        }

        @Override
        public Reproductions setUserIp(java.lang.String userIp) {
          return (Reproductions) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key("artwork_id")
        private java.lang.String artworkId;

        /**

         */
        public java.lang.String getArtworkId() {
          return artworkId;
        }

        public Reproductions setArtworkId(java.lang.String artworkId) {
          this.artworkId = artworkId;
          return this;
        }

        @Override
        public Reproductions set(String parameterName, Object value) {
          return (Reproductions) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Reproductions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Freya freya = new Freya(...);}
   *   {@code Freya.Reproductions.List request = freya.reproductions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Reproductions reproductions() {
    return new Reproductions();
  }

  /**
   * The "reproductions" collection of methods.
   */
  public class Reproductions {

    /**
     * Create a request for the method "reproductions.get".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param reproductionId
     * @return the request
     */
    public Get get(java.lang.String reproductionId) throws java.io.IOException {
      Get result = new Get(reproductionId);
      initialize(result);
      return result;
    }

    public class Get extends FreyaRequest<com.appspot.freya_app.freya.model.Reproduction> {

      private static final String REST_PATH = "reproductions/{reproduction_id}";

      /**
       * Create a request for the method "reproductions.get".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param reproductionId
       * @since 1.13
       */
      protected Get(java.lang.String reproductionId) {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.Reproduction.class);
        this.reproductionId = com.google.api.client.util.Preconditions.checkNotNull(reproductionId, "Required parameter reproductionId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("reproduction_id")
      private java.lang.String reproductionId;

      /**

       */
      public java.lang.String getReproductionId() {
        return reproductionId;
      }

      public Get setReproductionId(java.lang.String reproductionId) {
        this.reproductionId = reproductionId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "reproductions.list".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FreyaRequest<com.appspot.freya_app.freya.model.ReproductionCollection> {

      private static final String REST_PATH = "reproductions";

      /**
       * Create a request for the method "reproductions.list".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Freya.this, "GET", REST_PATH, null, com.appspot.freya_app.freya.model.ReproductionCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Set collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Freya freya = new Freya(...);}
     *   {@code Freya.Set.List request = freya.set().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Set set() {
      return new Set();
    }

    /**
     * The "set" collection of methods.
     */
    public class Set {

      /**
       * Create a request for the method "set.stock".
       *
       * This request holds the parameters needed by the freya server.  After setting any optional
       * parameters, call the {@link Stock#execute()} method to invoke the remote operation.
       *
       * @param reproductionId
       * @param stock
       * @return the request
       */
      public Stock stock(java.lang.String reproductionId, java.lang.String stock) throws java.io.IOException {
        Stock result = new Stock(reproductionId, stock);
        initialize(result);
        return result;
      }

      public class Stock extends FreyaRequest<Void> {

        private static final String REST_PATH = "reproductions/{reproduction_id}/stock";

        /**
         * Create a request for the method "set.stock".
         *
         * This request holds the parameters needed by the the freya server.  After setting any optional
         * parameters, call the {@link Stock#execute()} method to invoke the remote operation. <p> {@link
         * Stock#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param reproductionId
         * @param stock
         * @since 1.13
         */
        protected Stock(java.lang.String reproductionId, java.lang.String stock) {
          super(Freya.this, "POST", REST_PATH, null, Void.class);
          this.reproductionId = com.google.api.client.util.Preconditions.checkNotNull(reproductionId, "Required parameter reproductionId must be specified.");
          this.stock = com.google.api.client.util.Preconditions.checkNotNull(stock, "Required parameter stock must be specified.");
        }

        @Override
        public Stock setAlt(java.lang.String alt) {
          return (Stock) super.setAlt(alt);
        }

        @Override
        public Stock setFields(java.lang.String fields) {
          return (Stock) super.setFields(fields);
        }

        @Override
        public Stock setKey(java.lang.String key) {
          return (Stock) super.setKey(key);
        }

        @Override
        public Stock setOauthToken(java.lang.String oauthToken) {
          return (Stock) super.setOauthToken(oauthToken);
        }

        @Override
        public Stock setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Stock) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Stock setQuotaUser(java.lang.String quotaUser) {
          return (Stock) super.setQuotaUser(quotaUser);
        }

        @Override
        public Stock setUserIp(java.lang.String userIp) {
          return (Stock) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key("reproduction_id")
        private java.lang.String reproductionId;

        /**

         */
        public java.lang.String getReproductionId() {
          return reproductionId;
        }

        public Stock setReproductionId(java.lang.String reproductionId) {
          this.reproductionId = reproductionId;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.String stock;

        /**

         */
        public java.lang.String getStock() {
          return stock;
        }

        public Stock setStock(java.lang.String stock) {
          this.stock = stock;
          return this;
        }

        @Override
        public Stock set(String parameterName, Object value) {
          return (Stock) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Test collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Freya freya = new Freya(...);}
   *   {@code Freya.Test.List request = freya.test().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Test test() {
    return new Test();
  }

  /**
   * The "test" collection of methods.
   */
  public class Test {

    /**
     * Create a request for the method "test.populate".
     *
     * This request holds the parameters needed by the freya server.  After setting any optional
     * parameters, call the {@link Populate#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Populate populate() throws java.io.IOException {
      Populate result = new Populate();
      initialize(result);
      return result;
    }

    public class Populate extends FreyaRequest<Void> {

      private static final String REST_PATH = "populate";

      /**
       * Create a request for the method "test.populate".
       *
       * This request holds the parameters needed by the the freya server.  After setting any optional
       * parameters, call the {@link Populate#execute()} method to invoke the remote operation. <p>
       * {@link
       * Populate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Populate() {
        super(Freya.this, "POST", REST_PATH, null, Void.class);
      }

      @Override
      public Populate setAlt(java.lang.String alt) {
        return (Populate) super.setAlt(alt);
      }

      @Override
      public Populate setFields(java.lang.String fields) {
        return (Populate) super.setFields(fields);
      }

      @Override
      public Populate setKey(java.lang.String key) {
        return (Populate) super.setKey(key);
      }

      @Override
      public Populate setOauthToken(java.lang.String oauthToken) {
        return (Populate) super.setOauthToken(oauthToken);
      }

      @Override
      public Populate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Populate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Populate setQuotaUser(java.lang.String quotaUser) {
        return (Populate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Populate setUserIp(java.lang.String userIp) {
        return (Populate) super.setUserIp(userIp);
      }

      @Override
      public Populate set(String parameterName, Object value) {
        return (Populate) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Freya}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Freya}. */
    @Override
    public Freya build() {
      return new Freya(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FreyaRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFreyaRequestInitializer(
        FreyaRequestInitializer freyaRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(freyaRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
